# -*- coding: utf-8 -*-
"""model.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Sandeep0076/356deb35f0cfa68f07a51c19a1de49ad/model-py.ipynb
"""

import os
import numpy as np
import matplotlib.pyplot as plt
from skimage.io import imread
from skimage.transform import resize
import seaborn as sns
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from fastai import *
from fastai.vision import *
import cv2
from fastai.metrics import error_rate
import warnings
warnings.filterwarnings('ignore')

#### Number of elements in a list of path is same as number of classes you have

path = Path('./')
path.ls()
#### Data Loading For training

np.random.seed(40)
data = ImageDataBunch.from_folder(path, train = '.', valid_pct=0.2,
                                  ds_tfms=get_transforms(), size=128,
                                  num_workers=4).normalize(imagenet_stats)

### Create Model
learn = cnn_learner(data, models.resnet18, metrics=[accuracy], model_dir = Path("."),path = Path("."))

### Finding LR
learn.lr_find()
learn.recorder.plot(suggestions=True)

### Train Model
# Pick a value a bit before the minimum, where the loss still improves.
lr1 = 1e-3
lr2 = 1e-1
learn.fit_one_cycle(40,slice(lr1,lr2))
# Hyper Parameter Tuning
learn.unfreeze()
learn.fit_one_cycle(20,slice(1e-4,1e-3))
#### Save Model

learn.export(file = Path("./export.pkl"))
learn.model_dir = './'
#learn.save("stage-1",return_path=True)